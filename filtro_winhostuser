#!/bin/bash

LOG="/tmp/lexmark_winhostuser.log"
DB="/tmp/win_hostname_user.txt"

# --- get spool file path or read stdin to a temp file ---
rmfile=0
if [ -n "$6" ]; then
  file="$6"
else
  file="$(mktemp)"
  cat > "$file"
  rmfile=1
fi

{
  echo "========== $(date) =========="
  echo "Spool file: $file"
} >> "$LOG"

# --- basic checks ---
if [ ! -s "$file" ]; then
  echo "Archivo vacío o no encontrado" >> "$LOG"
  [ "$rmfile" = 1 ] && rm -f "$file"
  exit 0
fi

# Read only the FIRST line and strip CR/LF
line="$(head -n 1 "$file" | tr -d '\r\n')"

# Must have exactly 2 pipes => 3 fields
pipe_count="$(grep -o '|' <<< "$line" | wc -l)"
if [ "$pipe_count" -ne 2 ]; then
  echo "Formato inválido (se esperan 3 campos con 2 pipes): $line" >> "$LOG"
  [ "$rmfile" = 1 ] && rm -f "$file"
  exit 0
fi

# --- parse safely ---
IFS='|' read -r raw_host raw_user raw_ip <<< "$line"

# Trim spaces
trim() { printf '%s' "$1" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//'; }
hostname="$(trim "$raw_host" | tr '[:upper:]' '[:lower:]')"
usuario="$(trim "$raw_user" | tr '[:upper:]' '[:lower:]')"
ipaddr="$(trim "$raw_ip")"

# --- validations ---
# Hostname: length 11 or 12 (any chars), will process only first 11
h_len="${#hostname}"
if [ "$h_len" -ne 11 ] && [ "$h_len" -ne 12 ]; then
  echo "Hostname inválido (longitud $h_len, se requiere 11 o 12): '$hostname'" >> "$LOG"
  [ "$rmfile" = 1 ] && rm -f "$file"
  exit 0
fi

# Username: must start with 'o' or 'p'
if [[ ! "$usuario" =~ ^[op] ]]; then
  echo "Username inválido (debe iniciar con 'o' o 'p'): '$usuario'" >> "$LOG"
  [ "$rmfile" = 1 ] && rm -f "$file"
  exit 0
fi

# IP: must start with '118.'
if [[ "$ipaddr" != 118.* ]]; then
  echo "IP inválida (debe iniciar con '118.'): '$ipaddr'" >> "$LOG"
  [ "$rmfile" = 1 ] && rm -f "$file"
  exit 0
fi

# --- normalize hostname to first 11 chars for processing ---
host11="${hostname:0:11}"

# --- update DB: replace any existing line for host11, then add new mapping ---
tmpdb="$(mktemp)"
grep -v "^$host11|" "$DB" 2>/dev/null > "$tmpdb"
echo "$host11|$usuario|$ipaddr" >> "$tmpdb"
mv "$tmpdb" "$DB"

{
  echo "OK: Actualizado/Agregado -> $host11 | $usuario | $ipaddr (original hostname: $hostname)"
} >> "$LOG"

[ "$rmfile" = 1 ] && rm -f "$file"
exit 0